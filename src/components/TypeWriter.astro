---
interface Props {
    waitPeriod: number,
    messages: string[]
}
const { waitPeriod, messages } = Astro.props

---

<style>
  /* Cursor animation */
  @keyframes animated-cursor{
    from{border-right-color: var(--light-color);}
    to{border-right-color: transparent;}
  }
</style>
<script define:vars={{waitPeriod, messages}}>
    const TxtType = function(el, toRotate, period) {
        this.toRotate = toRotate;
        this.el = el;
        this.loopNum = 0;
        this.period = parseInt(period, 10) || 2000;
        this.txt = '';
        this.tick();
        this.isDeleting = false;
    };

    TxtType.prototype.tick = function() {
        let i = this.loopNum % this.toRotate.length;
        let fullTxt = this.toRotate[i];

        if (this.isDeleting) {
            this.txt = fullTxt.substring(0, this.txt.length - 1);
        } else {
            this.txt = fullTxt.substring(0, this.txt.length + 1);
        }

        this.el.innerHTML = `<span class="wrap">${this.txt}</span>`;
        let delta = 200 - Math.random() * 100;

        if (this.isDeleting) 
            delta /= 2;
        if (!this.isDeleting && this.txt === fullTxt) {
            delta = this.period;
            this.isDeleting = true;
        } else if (this.isDeleting && this.txt === '') {
            this.isDeleting = false;
            this.loopNum++;
            delta = 500;
        }
        setTimeout(() => {
            this.tick();
        }, delta);
    };

    window.onload = function() {
        let element = document.getElementsByClassName('typewrite')[0];
        if (messages) {
            new TxtType(element, messages, waitPeriod);
        }
        // INJECT CSS
        let css = document.createElement("style");
        css.innerHTML = ".typewrite > .wrap { color: var(--light-blue); border-right: 0.08em solid #00d0ff; animation: animated-cursor 600ms steps(29, end) infinite;}";
        document.body.appendChild(css);
    };
</script>

<span class="typewrite">
    <span class="wrap"></span>
</span>